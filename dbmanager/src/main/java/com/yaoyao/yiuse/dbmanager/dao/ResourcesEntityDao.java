package com.yaoyao.yiuse.dbmanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yaoyao.yiuse.dbmanager.entity.ResourcesEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESOURCES_ENTITY".
*/
public class ResourcesEntityDao extends AbstractDao<ResourcesEntity, Long> {

    public static final String TABLENAME = "RESOURCES_ENTITY";

    /**
     * Properties of entity ResourcesEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ResId = new Property(1, String.class, "resId", false, "RES_ID");
        public final static Property AimId = new Property(2, String.class, "aimId", false, "AIM_ID");
        public final static Property Localpath = new Property(3, String.class, "localpath", false, "LOCALPATH");
        public final static Property NetUrl = new Property(4, String.class, "netUrl", false, "NET_URL");
        public final static Property Md5 = new Property(5, String.class, "md5", false, "MD5");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property AddTime = new Property(7, long.class, "addTime", false, "ADD_TIME");
        public final static Property FileType = new Property(8, int.class, "fileType", false, "FILE_TYPE");
    }


    public ResourcesEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ResourcesEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESOURCES_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RES_ID\" TEXT UNIQUE ," + // 1: resId
                "\"AIM_ID\" TEXT NOT NULL ," + // 2: aimId
                "\"LOCALPATH\" TEXT," + // 3: localpath
                "\"NET_URL\" TEXT," + // 4: netUrl
                "\"MD5\" TEXT," + // 5: md5
                "\"NAME\" TEXT," + // 6: name
                "\"ADD_TIME\" INTEGER NOT NULL ," + // 7: addTime
                "\"FILE_TYPE\" INTEGER NOT NULL );"); // 8: fileType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESOURCES_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResourcesEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String resId = entity.getResId();
        if (resId != null) {
            stmt.bindString(2, resId);
        }
        stmt.bindString(3, entity.getAimId());
 
        String localpath = entity.getLocalpath();
        if (localpath != null) {
            stmt.bindString(4, localpath);
        }
 
        String netUrl = entity.getNetUrl();
        if (netUrl != null) {
            stmt.bindString(5, netUrl);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(6, md5);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getAddTime());
        stmt.bindLong(9, entity.getFileType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResourcesEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String resId = entity.getResId();
        if (resId != null) {
            stmt.bindString(2, resId);
        }
        stmt.bindString(3, entity.getAimId());
 
        String localpath = entity.getLocalpath();
        if (localpath != null) {
            stmt.bindString(4, localpath);
        }
 
        String netUrl = entity.getNetUrl();
        if (netUrl != null) {
            stmt.bindString(5, netUrl);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(6, md5);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getAddTime());
        stmt.bindLong(9, entity.getFileType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ResourcesEntity readEntity(Cursor cursor, int offset) {
        ResourcesEntity entity = new ResourcesEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // resId
            cursor.getString(offset + 2), // aimId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localpath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // netUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // md5
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.getLong(offset + 7), // addTime
            cursor.getInt(offset + 8) // fileType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResourcesEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAimId(cursor.getString(offset + 2));
        entity.setLocalpath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNetUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMd5(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddTime(cursor.getLong(offset + 7));
        entity.setFileType(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResourcesEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResourcesEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResourcesEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
